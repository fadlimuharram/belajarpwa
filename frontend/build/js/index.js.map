{"version":3,"sources":["dbhelper.js","idb.js","main.js"],"names":["DBHelper","idb","open","upgradeDB","oldVersion","createObjectStore","keyPath","createIndex","callback","_this","this","dbPromise","then","db","transaction","objectStore","getAll","restaurants","length","fetch","DATABASE_URL","response","json","restStore","forEach","restaurant","put","catch","error","console","log","id","_this2","reviews","revStore","Array","isArray","review","getDbObjectByID","navigator","onLine","reviewOfflineCounter","key","localStorage","hasOwnProperty","startsWith","setItem","JSON","stringify","sendDataWhenOnline","method","body","headers","Headers","Content-Type","contentType","get","indexOf","table","index","fav","favOffline","restaurant_id","is_favorite","updateFavInDB","pushDataFromLocalStorage","window","addEventListener","parse","updateFav","removeItem","concat","_toConsumableArray","document","querySelectorAll","element","remove","reviewOffline","sendReview","fetchRestaurants","find","r","Error","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","cuisines","uniqueCuisines","photograph","icon","L","iconUrl","shadowUrl","marker","Marker","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","myMap","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","slice","call","nativeObject","query","count","instance","items","iterateCursor","push","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","module","exports","default","self","markers","e","registerServiceWorker","fetchNeighborhoods","fetchCuisines","initMap","fillNeighborhoodsHTML","select","getElementById","option","createElement","innerHTML","append","fillCuisinesHTML","center","zoom","tileLayer","attribution","maxZoom","accessToken","scrollWheelZoom","disable","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","createRestaurantHTML","empty","tabIndex","className","addMarkersToMap","LazyLoad","li","picture","source","media","setAttribute","image","div","address","more","href","mapMarkerForRestaurant","on","location","options","serviceWorker","register","err"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/`;\r\n  }\r\n\r\n  static dbPromise() {\r\n    return idb.open('db', 1, upgradeDB => {\r\n      switch (upgradeDB.oldVersion) {\r\n      case 0:\r\n        upgradeDB.createObjectStore('restaurants', {keyPath: 'id'});\r\n        break;\r\n      case 1:\r\n        const reviewsStore = upgradeDB.createObjectStore('reviews', {keyPath: 'id'});\r\n        reviewsStore.createIndex('byRestaurantId', 'restaurant_id');\r\n        break;\r\n      }\r\n    });\r\n  }\r\n\r\n  static fetchRestaurants(callback) {\r\n    return this.dbPromise()\r\n      .then(db => {\r\n        let tx = db.transaction('restaurants');\r\n        const store = tx.objectStore('restaurants');\r\n        return store.getAll();\r\n      })\r\n      .then(restaurants => {\r\n        if (restaurants.length !== 0) {\r\n          return callback(null, restaurants);\r\n        }\r\n        fetch(`${DBHelper.DATABASE_URL}restaurants`)\r\n          .then(response => response.json())\r\n          .then(restaurants => {\r\n            this.dbPromise()\r\n              .then(db => {\r\n                if (!db) return db;\r\n\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                const restStore = tx.objectStore('restaurants');\r\n\r\n                restaurants.forEach(restaurant => restStore.put(restaurant));\r\n\r\n                return callback(null, restaurants);\r\n              });\r\n          })\r\n          .catch(error => {\r\n            console.log('Restaurants fetch error: ' + error);\r\n          });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch a Reviews by Restaurant ID.\r\n   */\r\n  static fetchReviewsById(id, callback) {\r\n    fetch(`${DBHelper.DATABASE_URL}reviews/?restaurant_id=${id}`)\r\n      .then(response => response.json())\r\n      .then(reviews => {\r\n        this.dbPromise()\r\n          .then(db => {\r\n            if (!db) return;\r\n\r\n            let tx = db.transaction('reviews', 'readwrite');\r\n            const revStore = tx.objectStore('reviews');\r\n\r\n            if (Array.isArray(reviews)) {\r\n              reviews.forEach(review => revStore.put(review));\r\n            } else {\r\n              revStore.put(reviews);\r\n            }\r\n          });\r\n        return callback(null, reviews);\r\n      })\r\n      .catch(error => {\r\n        console.log('Review fetch by ID error: ' + error);\r\n        return DBHelper.getDbObjectByID('reviews', 'byRestaurantId', id)\r\n          .then(reviews => {\r\n            return callback(null, reviews);\r\n          });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Send Review\r\n   */\r\n  static sendReview(review) {\r\n    if (!navigator.onLine) {\r\n      // count offline reviews in localstorage\r\n      let reviewOfflineCounter = 1;\r\n      for (var key in localStorage) {\r\n        if (localStorage.hasOwnProperty(key)) {\r\n          if (localStorage[key] !== null && key.startsWith('reviewOffline')) {\r\n            reviewOfflineCounter++;\r\n          }\r\n        }\r\n      }\r\n\r\n      // add review to localstorage and add eventlistner to send when online\r\n      localStorage.setItem('reviewOffline' + reviewOfflineCounter, JSON.stringify(review));\r\n      console.log('Offline, review saved local and will sync later');\r\n      DBHelper.sendDataWhenOnline();\r\n      return;\r\n    }\r\n\r\n    fetch(`${DBHelper.DATABASE_URL}reviews`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(review),\r\n      headers: new Headers({'Content-Type': 'application/json'})\r\n    }).then((response) => {\r\n      const contentType = response.headers.get('content-type');\r\n      if (contentType && contentType.indexOf('application/json') !== -1) {\r\n        return response.json();\r\n      } else {\r\n        return 'Success';\r\n      }\r\n    }).catch(error => console.log('Review fetch error: ' + error));\r\n  }\r\n\r\n  /**\r\n   * Get object from IndexedDB by ID\r\n   */\r\n  static getDbObjectByID(table, index, id) {\r\n    return this.dbPromise().then(db => {\r\n      if (!db) return;\r\n\r\n      const store = db.transaction(table).objectStore(table);\r\n      const indexId = store.index(index);\r\n\r\n      return indexId.getAll(id);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update Favorite by ID\r\n   */\r\n  static updateFav(id, fav) {\r\n    if (!navigator.onLine) {\r\n      let favOffline = {\r\n        restaurant_id: id,\r\n        is_favorite: fav\r\n      };\r\n\r\n      localStorage.setItem('favoriteOffline' + id, JSON.stringify(favOffline));\r\n      console.log('Offline, restaurant ' + id + ' favorite status updated and will sync later');\r\n      DBHelper.sendDataWhenOnline();\r\n      DBHelper.updateFavInDB(id, fav);\r\n      return;\r\n    }\r\n\r\n    fetch(`${DBHelper.DATABASE_URL}restaurants/${id}/?is_favorite=${fav}`, {\r\n      method: 'PUT'\r\n    }).then(() => {\r\n      DBHelper.updateFavInDB(id, fav);\r\n    }).catch(error => console.log('Favorite fetch error: ' + error));\r\n  }\r\n\r\n  /**\r\n   * Change favorite status in IndexedDB\r\n   */\r\n  static updateFavInDB(id, fav) {\r\n    this.dbPromise().then(db => {\r\n      if (!db) return;\r\n\r\n      let tx = db.transaction('restaurants', 'readwrite');\r\n      const restStore = tx.objectStore('restaurants');\r\n\r\n      restStore.get(id)\r\n        .then(restaurant => {\r\n          restaurant.is_favorite = fav;\r\n          restStore.put(restaurant);\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Eventlistner for Online status\r\n   */\r\n  static sendDataWhenOnline() {\r\n    if (navigator.onLine) {\r\n      DBHelper.pushDataFromLocalStorage();\r\n    } else {\r\n      window.addEventListener('online', () => {\r\n        DBHelper.pushDataFromLocalStorage();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pushing favorite status and sending reviews\r\n   */\r\n  static pushDataFromLocalStorage() {\r\n    // loop through localstorage items\r\n    for (var key in localStorage) {\r\n      if (localStorage.hasOwnProperty(key)) {\r\n        // update favorites\r\n        if (localStorage[key] !== null && key.startsWith('favoriteOffline')) {\r\n          // get favorite from localstorage\r\n          let favOffline = JSON.parse(localStorage[key]);\r\n\r\n          // send it to backend and remove\r\n          DBHelper.updateFav(favOffline.restaurant_id, favOffline.is_favorite);\r\n          localStorage.removeItem(key);\r\n          console.log('Online, favorite for restaurant ' + favOffline.restaurant_id + ' updated');\r\n        }\r\n\r\n        // update reviews\r\n        if (localStorage[key] !== null && key.startsWith('reviewOffline')) {\r\n          // remove offline indicator\r\n          [...document.querySelectorAll('.reviews-offline')].forEach(element => {\r\n            element.remove();\r\n          });\r\n\r\n          // get review from localstorage\r\n          let reviewOffline = JSON.parse(localStorage[key]);\r\n\r\n          // send it to backend and remove\r\n          DBHelper.sendReview(reviewOffline);\r\n          localStorage.removeItem(key);\r\n          console.log('Online, review sent');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) {\r\n          // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else {\r\n          // Restaurant does not exist in the database\r\n          callback(new Error('Restaurant does not exist'), null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type === cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood === neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine !== 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type === cuisine);\r\n        }\r\n        if (neighborhood !== 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood === neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) === i);\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) === i);\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant.photograph}.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant) {\r\n    let icon = L.icon({\r\n      iconUrl: 'img/icons/marker-icon.png',\r\n      shadowUrl: 'img/icons/marker-shadow.png'\r\n    });\r\n\r\n    const marker = new L.Marker([restaurant.latlng.lat, restaurant.latlng.lng], {\r\n      title: restaurant.name,\r\n      alt: restaurant.name,\r\n      icon: icon,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n    });\r\n\r\n    marker.addTo(myMap);\r\n    return marker;\r\n  }\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  } else {\n    self.idb = exp;\n  }\n}());\n","'use strict';\r\n\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines;\r\nvar markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (e) => {\r\n  registerServiceWorker();\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n\r\n  // init map\r\n  initMap();\r\n\r\n  // if localstorage not empty add eventlistner to send data when online\r\n  if (localStorage.length !== 0) DBHelper.sendDataWhenOnline();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nconst initMap = () => {\r\n  self.myMap = L.map('map', {\r\n    center: [40.704216, -73.975501],\r\n    zoom: 12\r\n  });\r\n\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={accessToken}', {\r\n    attribution: '',\r\n    maxZoom: 18,\r\n    id: 'mapbox.streets',\r\n    accessToken: 'pk.eyJ1IjoibWF1bGlkYW4iLCJhIjoiY2puZmpwNWp1MDFqazN3bG1qeThxZzYyOCJ9.BrIt05DvcEYSSirmLlsynQ'\r\n  }).addTo(myMap);\r\n\r\n  myMap.scrollWheelZoom.disable();\r\n  updateRestaurants();\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    console.log(restaurant);\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n\r\n  if (restaurants.length === 0) {\r\n    const empty = document.createElement('h1');\r\n    empty.innerHTML = 'No results found';\r\n    empty.tabIndex = '0';\r\n    empty.className = 'restaurant-empty';\r\n    ul.append(empty);\r\n  }\r\n  addMarkersToMap();\r\n\r\n  // Lazyload IMG's\r\n  let myLazyLoad = new LazyLoad();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const picture = document.createElement('picture');\r\n  li.append(picture);\r\n\r\n  const source = document.createElement('source');\r\n  source.media = '(min-width: 768px)';\r\n  if (restaurant.photograph === undefined) {\r\n    source.setAttribute('data-src', '/img/nophoto.jpg');\r\n  } else {\r\n    source.setAttribute('data-srcset', '/img/' + restaurant.photograph + '.jpg');\r\n  }\r\n  picture.append(source);\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  console.log('photo : ',restaurant.photograph);\r\n  if (restaurant.photograph === undefined) {\r\n    image.setAttribute('data-src', '/img/nophoto.jpg');\r\n  } else {\r\n    image.setAttribute('data-src', '/img/' + restaurant.photograph + '-400.jpg');\r\n  }\r\n  image.alt = restaurant.name + ' Restaurant';\r\n  picture.append(image);\r\n\r\n  const div = document.createElement('div');\r\n  div.className = 'restaurant-list__separator';\r\n  li.append(div);\r\n\r\n  const name = document.createElement('h1');\r\n  name.innerHTML = restaurant.name;\r\n  name.tabIndex = '0';\r\n  div.append(name);\r\n\r\n\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  neighborhood.tabIndex = '0';\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  address.tabIndex = '0';\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('aria-label', `Click for more information about ${restaurant.name} restaurant.`);\r\n  li.append(more);\r\n\r\n  return li;\r\n};\r\n\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant);\r\n\r\n    marker.on('click', function() {\r\n      window.location = (this.options.url);\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n\r\n/**\r\n * Register ServiceWorker.\r\n */\r\nconst registerServiceWorker = () => {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.register('sw.js')\r\n      .catch(err => {\r\n        console.log('[SW] Registration Failed', err);\r\n      });\r\n  }\r\n};\r\n"]}